pipeline{
    agent any
    environment {
        PATH = "$PATH:/usr/share/maven/bin"
    }
    stages{
       stage('GetCode'){
            steps{
                git 'https://github.com/Mabasha545556/simple-app.git'
            }
         }        
       stage('Build'){
            steps{
                sh 'mvn clean package'
            }
         }
        stage('SonarQube analysis') {
//    def scannerHome = tool 'SonarScanner 4.0';
        steps{
        withSonarQubeEnv('sonarqube-8.9.2') { 
        // If you have configured more than one global server connection, you can specify its name
//      sh "${scannerHome}/bin/sonar-scanner"
        sh "mvn sonar:sonar"
    }
        }
    }
       stage ("artifact upload to nexus"){
            steps{
                nexusArtifactUploader artifacts: [
                    [
                        artifactId: 'simple-app', 
                        classifier: '', 
                        file: 'target/simple-app-3.0.0-SNAPSHOT.war', 
                        type: 'war'
                        ]
                        
                    ], 
                    credentialsId: 'nexus', 
                    groupId: 'in.sample', 
                    nexusUrl: '172.31.3.113:8081', 
                    nexusVersion: 'nexus3', 
                    protocol: 'http', 
                    repository: 'myrepository', 
                    version: '3.0.0'
                       
            }
        } 
          stage ("Build Docker Image"){
            steps{
           sh 'docker build -t mabasha/myapp:tomcat . '
            }
        }
        stage ("Push Docker Image"){
            steps{
            withCredentials([string(credentialsId: 'docker', variable: 'dockerhubpwd')]) {
             sh "docker login -u mabasha -p ${dockerhubpwd}"
        }    
            sh 'docker push mabasha/myapp:tomcat'
            }
        }
        stage ('Deploy to K8s'){
            steps{
                sshagent(['kubernets']) {
                    sh "ssh -o StrictHostKeyChecking=no centos@13.232.53.99"
                    script{
                        try{
                           sh "ssh centos@13.232.53.99 kubectl apply -f tomcat.yml"   
                        }catch (error){
                           sh "ssh centos@13.232.53.99 kubectl create -f tomcat.yml"
                        }
                     }
                   }
               }
            }
    }
}

